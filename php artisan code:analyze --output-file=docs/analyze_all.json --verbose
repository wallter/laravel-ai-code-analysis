- **Check console output** for immediate feedback.
- **Monitor Laravel logs** at `storage/logs/laravel.log` for detailed information.

## Features

### Code Parsing and Analysis
- **Comprehensive Parsing:** Analyzes PHP files to extract detailed information about classes, methods, functions, traits, and annotations, providing a holistic view of the codebase.
- **Abstract Syntax Tree (AST) Insights:** Captures detailed AST data, including node types, attributes, and structural relationships, enabling advanced analysis of code structure and behavior.
- **Granular Metadata:** Extracts metadata such as namespaces, file paths, line numbers, and method parameters to facilitate in-depth understanding and precise debugging.
- **Persistent Tracking:** Stores parsed data in a database, allowing for historical tracking, cross-referencing, and analysis over time.
- **Supports Advanced Use Cases:** Enables scenarios like dependency mapping, identifying code smells, and generating tailored documentation or refactoring suggestions based on rich structural insights.

### Multi-Pass AI Analysis
- **Documentation Generation:** Automatically creates concise, structured documentation from both AST data and raw code. Summarizes class purposes, key methods, parameters, and usage context with clarity.
- **Refactoring Suggestions:** Offers actionable recommendations to improve code structure, maintainability, and adherence to SOLID principles, with a focus on reducing duplication and enhancing clarity.
- **Functionality Analysis:** Evaluates the code for functional correctness, identifies edge cases, and highlights performance bottlenecks. Provides suggestions for enhancing scalability, reliability, and testability.
- **Style & Convention Review:** Ensures adherence to PSR standards and highlights inconsistencies in formatting, naming conventions, and documentation. Recommends improvements for readability and consistency.
- **Performance Analysis:** Identifies inefficiencies like redundant operations or excessive memory usage. Suggests optimizations such as caching, algorithmic improvements, or asynchronous processing.
- **Dependency Review:** Analyzes external dependencies for compatibility, security risks, and outdated packages. Recommends updates and alternatives for deprecated or inefficient libraries.
- **AST Insights:** Provides insights into the code structure and relationships using AST data, helping to understand and navigate the codebase effectively.

***Future Enhancements**:* Multi-pass analysis will include dependent passes that reuse data for scoring recommendations, consolidating documentation, and producing detailed summaries.

## Requirements

- **PHP:** >= 8.0
- **Composer:** To manage PHP dependencies.
- **Laravel:** Version 11.x
- **SQLite:** For the database.
- **OpenAI API Key:** To enable AI-driven features.

## Installation

1. **Clone the Repository**

   ```bash
   git clone https://github.com/your-username/laravel-ai-code-analysis.git
   cd laravel-ai-code-analysis
   ```

2. **Install Dependencies**

   ```bash
   composer install
   ```

3. **Set Up Environment Variables**

   - Copy the example environment file and configure the necessary variables.

     ```bash
     cp .env.example .env
     ```

   - Open `.env` and set your `OPENAI_API_KEY` along with other configurations as needed.

4. **Generate Application Key**

   ```bash
   php artisan key:generate
   ```

5. **Run Migrations**

   ```bash
   php artisan migrate
   ```

## Configuration

### AI Service Configuration

The AI capabilities are configured in `config/ai.php`. This file defines the AI operations, multi-pass analysis settings, and default model configurations. Configure via `.env`.

- **API Credentials**

  ```php
  'openai_api_key' => env('OPENAI_API_KEY'),
  ```

- **Default AI Settings**

  ```php
  'default' => [
      'model'         => env('AI_DEFAULT_MODEL', 'gpt-4o-mini'),
      'max_tokens'    => env('AI_DEFAULT_MAX_TOKENS', 500),
      'temperature'   => env('AI_DEFAULT_TEMPERATURE', 0.5),
      'system_message'=> 'You are a helpful AI assistant.',
  ],
  ```

- **AI Operations**

  Define each AI operation with specific configurations.

  ```php
  'operations' => [
      'code_analysis' => [
          'driver'          => 'chat',
          'model'           => env('CODE_ANALYSIS_MODEL', 'gpt-4o-mini'),
          'max_tokens'      => env('CODE_ANALYSIS_MAX_TOKENS', 1500),
          'temperature'     => env('CODE_ANALYSIS_TEMPERATURE', 0.4),
          'system_message'  => 'You are an assistant that generates comprehensive documentation from AST data. Focus on describing classes, methods, parameters, and the usage context.',
          'prompt'          => '',
      ],
      // Add additional operations as needed...
  ],
  ```

- **Multi-Pass Analysis**

  Configure the order and specifics of each analysis pass.

  ```php
  'multi_pass_analysis' => [
      'pass_order' => [
          'doc_generation',
          'refactor_suggestions',
          // Additional passes...
      ],
      'doc_generation' => [
          'operation'    => 'code_analysis',
          'type'         => 'both',
          'max_tokens'   => 1000,
          'temperature'  => 0.3,
          'prompt'       => 'Your prompt here...',
      ],
      'refactor_suggestions' => [
          'operation'    => 'code_improvements',
          'type'         => 'raw',
          'max_tokens'   => 1800,
          'temperature'  => 0.6,
          'prompt'       => 'Your prompt here...',
      ],
      // Additional pass definitions...
  ],
  ```

- **Analysis Limits**

  Set global limits to control the scope of analysis inside the `config/ai.php` configuration. Each of the `parse:files` and `code:analyze` commands offers options (`--limit-class=1 --limit-method=1`) to allow for fine-grained testing and calibration of AI prompts.

  ```php
  'analysis_limits' => [
      'limit_class'  => env('ANALYSIS_LIMIT_CLASS', 0),
      'limit_method' => env('ANALYSIS_LIMIT_METHOD', 0),
  ],
  ```

### Parsing Configuration

Parsing configuration is set up in `config/parsing.php`. This configuration determines what files or folders to recursively find and parse PHP files inâ€”kicked off by the `ParseFilesCommand` (`php artisan parse:files --output-file=docs/parse_all.json --verbose`) while parsing is handled by `app/Services/Parsing/ParserService.php`.

## Usage

### Artisan Commands

The project provides several Artisan commands to perform various tasks.

1. **Analyze PHP Code**

   Analyzes PHP files, gathers AST data, and applies AI-driven multi-pass analysis.

   ```bash
   php artisan code:analyze
   ```

   **Options:**

   - `--output-file=`: Specify a JSON file to store the analysis results.
   - `--limit-class=`: Limit the number of PHP files to analyze.
   - `--limit-method=`: Limit the number of methods per class to process.

2. **Parse Files**

   Parses configured files/directories to list discovered classes and functions.

   ```bash
   php artisan parse:files
   ```

   **Options:**

   - `--filter=`: Filter item names.
   - `--output-file=`: Specify a JSON file to export the parsed data.
   - `--limit-class=`: Limit the number of classes to parse.
   - `--limit-method=`: Limit the number of methods per class to parse.

3. **Generate PHPUnit Tests**

   Generates PHPUnit test skeletons for discovered classes and methods.

   ```bash
   php artisan generate:tests
   ```

   **Options:**

   - `--filter=`: Filter classes for which to generate tests.

4. **Process AI Passes**

   Processes the next AI analysis pass for each `CodeAnalysis` record.

   ```bash
   php artisan passes:process
   ```

   **Options:**

   - `--dry-run`: Run the command without persisting any changes.
   - `--verbose`: Display detailed logs.

5. **Backup Database**

   Backs up the SQLite database.

   ```bash
   php artisan db:backup
   ```

   **Options:**

   - `--path=`: Specify a path to store the backup file.

6. **Restore Database**

   Restores the SQLite database from a backup file.

   ```bash
   php artisan db:backup:restore
   ```

   **Options:**

   - `--path=`: Specify the backup file to restore from.

## Testing

The project includes PHPUnit tests to ensure the reliability of its features.

1. **Run Tests**

   ```bash
   php artisan test
   ```

2. **Test Structure**

   Tests are located in the `tests` directory and extend the base `TestCase` class. You can find feature tests for various commands and services.

## Contributing

Contributions are welcome! Please follow these steps to contribute:

1. **Fork the Repository**

2. **Create a New Branch**

   ```bash
   git checkout -b feature/YourFeatureName
   ```

3. **Make Your Changes**

4. **Run Tests**

   Ensure all tests pass before submitting.

   ```bash
   php artisan test
   ```

5. **Commit Your Changes**

   ```bash
   git commit -m "Add your detailed description here"
   ```

6. **Push to Your Fork**

   ```bash
   git push origin feature/YourFeatureName
   ```

7. **Create a Pull Request**

   Submit a pull request outlining your changes and their purpose.

## License

This project is open-sourced software licensed under the [Apache License 2.0](LICENSE).

You may use, modify, and distribute this software under the terms of the Apache License. For more details, see the [LICENSE](LICENSE) file included in this repository.
